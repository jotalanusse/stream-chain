// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: klyraprotocol/assets/asset.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Asset defines a single exchangable asset.
type Asset struct {
	// Unique, sequentially-generated.
	Id uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The human readable symbol of the `Asset` (e.g. `TDAI`, `ATOM`).
	// Must be uppercase, unique and correspond to the canonical symbol of the
	// full coin.
	Symbol string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`
	// The name of base denomination unit of the `Asset` (e.g. `uatom`,
	// 'ibc/xxxxx'). Must be unique and match the `denom` used in the `sdk.Coin`
	// type in the `x/bank` module.
	Denom string `protobuf:"bytes,3,opt,name=denom,proto3" json:"denom,omitempty"`
	// The exponent of converting one unit of `denom` to a full coin.
	// For example, `name=USDC, denom=uusdc, denom_exponent=-6` defines that
	// `1 uusdc = 10^(-6) USDC`. Note that `uusdc` refers to a `Coin` type in
	// `x/bank`, where the prefix `u` means `micro` by convetion. `uusdc` is
	// a different concept from a "quantum" defined by `atomic_resolution` below.
	// To convert from an amount of `denom` to quantums:
	// `quantums = denom_amount * 10^(denom_exponent - atomic_resolution)`
	DenomExponent int32 `protobuf:"zigzag32,4,opt,name=denom_exponent,json=denomExponent,proto3" json:"denom_exponent,omitempty"`
	// `true` if this `Asset` has a valid `MarketId` value.
	HasMarket bool `protobuf:"varint,5,opt,name=has_market,json=hasMarket,proto3" json:"has_market,omitempty"`
	// The `Id` of the `Market` associated with this `Asset`. It acts as the
	// oracle price for the purposes of calculating collateral
	// and margin requirements.
	MarketId uint32 `protobuf:"varint,6,opt,name=market_id,json=marketId,proto3" json:"market_id,omitempty"`
	// The exponent for converting an atomic amount (1 'quantum')
	// to a full coin. For example, if `atomic_resolution = -8`
	// then an `asset_position` with `base_quantums = 1e8` is equivalent to
	// a position size of one full coin.
	AtomicResolution int32 `protobuf:"zigzag32,7,opt,name=atomic_resolution,json=atomicResolution,proto3" json:"atomic_resolution,omitempty"`
	// The current yield index is determined by the cumulative
	// all-time history of the yield mechanism for assets.
	// Starts at 0. This string should always be converted big.Rat.
	AssetYieldIndex string `protobuf:"bytes,8,opt,name=asset_yield_index,json=assetYieldIndex,proto3" json:"asset_yield_index,omitempty"`
}

func (m *Asset) Reset()         { *m = Asset{} }
func (m *Asset) String() string { return proto.CompactTextString(m) }
func (*Asset) ProtoMessage()    {}
func (*Asset) Descriptor() ([]byte, []int) {
	return fileDescriptor_fef1de81a4b2a6eb, []int{0}
}
func (m *Asset) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Asset) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Asset.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Asset) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Asset.Merge(m, src)
}
func (m *Asset) XXX_Size() int {
	return m.Size()
}
func (m *Asset) XXX_DiscardUnknown() {
	xxx_messageInfo_Asset.DiscardUnknown(m)
}

var xxx_messageInfo_Asset proto.InternalMessageInfo

func (m *Asset) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Asset) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

func (m *Asset) GetDenom() string {
	if m != nil {
		return m.Denom
	}
	return ""
}

func (m *Asset) GetDenomExponent() int32 {
	if m != nil {
		return m.DenomExponent
	}
	return 0
}

func (m *Asset) GetHasMarket() bool {
	if m != nil {
		return m.HasMarket
	}
	return false
}

func (m *Asset) GetMarketId() uint32 {
	if m != nil {
		return m.MarketId
	}
	return 0
}

func (m *Asset) GetAtomicResolution() int32 {
	if m != nil {
		return m.AtomicResolution
	}
	return 0
}

func (m *Asset) GetAssetYieldIndex() string {
	if m != nil {
		return m.AssetYieldIndex
	}
	return ""
}

func init() {
	proto.RegisterType((*Asset)(nil), "klyraprotocol.assets.Asset")
}

func init() { proto.RegisterFile("klyraprotocol/assets/asset.proto", fileDescriptor_fef1de81a4b2a6eb) }

var fileDescriptor_fef1de81a4b2a6eb = []byte{
	// 321 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0xd1, 0x41, 0x4b, 0xc3, 0x30,
	0x14, 0x07, 0xf0, 0xa5, 0xba, 0xb9, 0x05, 0x36, 0x5d, 0x18, 0x12, 0x10, 0x4b, 0x11, 0x84, 0xa2,
	0x6c, 0x3b, 0xf8, 0x09, 0x14, 0x1c, 0xec, 0x20, 0x48, 0x3d, 0xe9, 0xa5, 0x66, 0x4d, 0xb0, 0x61,
	0x4d, 0x32, 0x9a, 0x0c, 0xd6, 0xa3, 0xdf, 0xc0, 0x8f, 0xe5, 0x71, 0x47, 0x8f, 0xb2, 0x7d, 0x11,
	0xe9, 0xcb, 0x36, 0xf0, 0xd4, 0xf7, 0x7e, 0xff, 0x07, 0x7d, 0x7d, 0xc5, 0xd1, 0xbc, 0xa8, 0x4a,
	0xb6, 0x28, 0x8d, 0x33, 0x99, 0x29, 0xc6, 0xcc, 0x5a, 0xe1, 0xac, 0x7f, 0x8c, 0x40, 0xc9, 0xe0,
	0xdf, 0xc4, 0xc8, 0x4f, 0x5c, 0x7d, 0x06, 0xb8, 0x79, 0x5f, 0x97, 0xa4, 0x87, 0x03, 0xc9, 0x29,
	0x8a, 0x50, 0xdc, 0x4d, 0x02, 0xc9, 0xc9, 0x39, 0x6e, 0xd9, 0x4a, 0xcd, 0x4c, 0x41, 0x83, 0x08,
	0xc5, 0x9d, 0x64, 0xd7, 0x91, 0x01, 0x6e, 0x72, 0xa1, 0x8d, 0xa2, 0x47, 0xc0, 0xbe, 0x21, 0xd7,
	0xb8, 0x07, 0x45, 0x2a, 0x56, 0x0b, 0xa3, 0x85, 0x76, 0xf4, 0x38, 0x42, 0x71, 0x3f, 0xe9, 0x82,
	0x3e, 0xee, 0x90, 0x5c, 0x62, 0x9c, 0x33, 0x9b, 0x2a, 0x56, 0xce, 0x85, 0xa3, 0xcd, 0x08, 0xc5,
	0xed, 0xa4, 0x93, 0x33, 0xfb, 0x04, 0x40, 0x2e, 0x70, 0xc7, 0x47, 0xa9, 0xe4, 0xb4, 0x05, 0xab,
	0xb4, 0x3d, 0x4c, 0x39, 0xb9, 0xc5, 0x7d, 0xe6, 0x8c, 0x92, 0x59, 0x5a, 0x0a, 0x6b, 0x8a, 0xa5,
	0x93, 0x46, 0xd3, 0x13, 0x78, 0xcb, 0x99, 0x0f, 0x92, 0x83, 0x93, 0x1b, 0xdc, 0x87, 0x2f, 0x4c,
	0x2b, 0x29, 0x0a, 0x9e, 0x4a, 0xcd, 0xc5, 0x8a, 0xb6, 0x61, 0xe3, 0x53, 0x08, 0x5e, 0x6b, 0x9f,
	0xd6, 0xfc, 0xf0, 0xfe, 0xbd, 0x09, 0xd1, 0x7a, 0x13, 0xa2, 0xdf, 0x4d, 0x88, 0xbe, 0xb6, 0x61,
	0x63, 0xbd, 0x0d, 0x1b, 0x3f, 0xdb, 0xb0, 0xf1, 0x36, 0xf9, 0x90, 0x2e, 0x5f, 0xce, 0x46, 0x99,
	0x51, 0xe3, 0x17, 0x57, 0x0a, 0xa6, 0x26, 0x52, 0x33, 0x9d, 0x89, 0xe1, 0xf3, 0xfe, 0xd2, 0x16,
	0x78, 0x98, 0xe5, 0x4c, 0xea, 0xf1, 0xe1, 0xfe, 0xab, 0xfd, 0x1f, 0x70, 0xd5, 0x42, 0xd8, 0x59,
	0x0b, 0x82, 0xbb, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xae, 0x53, 0xe3, 0xa6, 0xa6, 0x01, 0x00,
	0x00,
}

func (m *Asset) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Asset) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Asset) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.AssetYieldIndex) > 0 {
		i -= len(m.AssetYieldIndex)
		copy(dAtA[i:], m.AssetYieldIndex)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.AssetYieldIndex)))
		i--
		dAtA[i] = 0x42
	}
	if m.AtomicResolution != 0 {
		i = encodeVarintAsset(dAtA, i, uint64((uint32(m.AtomicResolution)<<1)^uint32((m.AtomicResolution>>31))))
		i--
		dAtA[i] = 0x38
	}
	if m.MarketId != 0 {
		i = encodeVarintAsset(dAtA, i, uint64(m.MarketId))
		i--
		dAtA[i] = 0x30
	}
	if m.HasMarket {
		i--
		if m.HasMarket {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.DenomExponent != 0 {
		i = encodeVarintAsset(dAtA, i, uint64((uint32(m.DenomExponent)<<1)^uint32((m.DenomExponent>>31))))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Denom) > 0 {
		i -= len(m.Denom)
		copy(dAtA[i:], m.Denom)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Denom)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Symbol) > 0 {
		i -= len(m.Symbol)
		copy(dAtA[i:], m.Symbol)
		i = encodeVarintAsset(dAtA, i, uint64(len(m.Symbol)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintAsset(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintAsset(dAtA []byte, offset int, v uint64) int {
	offset -= sovAsset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Asset) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovAsset(uint64(m.Id))
	}
	l = len(m.Symbol)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	l = len(m.Denom)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	if m.DenomExponent != 0 {
		n += 1 + sozAsset(uint64(m.DenomExponent))
	}
	if m.HasMarket {
		n += 2
	}
	if m.MarketId != 0 {
		n += 1 + sovAsset(uint64(m.MarketId))
	}
	if m.AtomicResolution != 0 {
		n += 1 + sozAsset(uint64(m.AtomicResolution))
	}
	l = len(m.AssetYieldIndex)
	if l > 0 {
		n += 1 + l + sovAsset(uint64(l))
	}
	return n
}

func sovAsset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAsset(x uint64) (n int) {
	return sovAsset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Asset) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Asset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Asset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Symbol", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Symbol = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Denom", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Denom = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DenomExponent", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.DenomExponent = v
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HasMarket", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.HasMarket = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MarketId", wireType)
			}
			m.MarketId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MarketId |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AtomicResolution", wireType)
			}
			var v int32
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = int32((uint32(v) >> 1) ^ uint32(((v&1)<<31)>>31))
			m.AtomicResolution = v
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetYieldIndex", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAsset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAsset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AssetYieldIndex = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipAsset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAsset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAsset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAsset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAsset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAsset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAsset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAsset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAsset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAsset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAsset = fmt.Errorf("proto: unexpected end of group")
)
